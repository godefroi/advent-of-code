namespace AdventOfCode;

[Generator]
public class ProblemSourceGenerator : ISourceGenerator
{
	public void Initialize(GeneratorInitializationContext context) { }

	public void Execute(GeneratorExecutionContext context)
	{
		var entryPoint = context.Compilation.GetEntryPoint(context.CancellationToken);

		if (entryPoint == null) {
			return;
		}

		var programType = entryPoint.ContainingType;

		//programType.DeclaringSyntaxReferences.Any(sr => sr.SyntaxTree.)

		var problemsMember = programType.GetMembers("Problems").SingleOrDefault();

		if (problemsMember == null) {
			return;
		}

		using var sw = new StringWriter();

		sw.WriteLine("// <auto-generated/>");
		sw.WriteLine("");
		sw.WriteLine("using System;");
		sw.WriteLine("");
		sw.WriteLine("using AdventOfCode;");
		sw.WriteLine("");
		sw.WriteLine($"namespace {entryPoint.ContainingNamespace.ToDisplayString()}");
		sw.WriteLine("{");
		sw.WriteLine($"\tpublic static partial class {entryPoint.ContainingType.Name}");
		sw.WriteLine("\t{");
		sw.WriteLine("\t\tprivate static partial ProblemMetadata[] Problems() => ProblemList.Problems;");
		sw.WriteLine("\t}");
		sw.WriteLine("");
		sw.WriteLine("\tfile static class ProblemList");
		sw.WriteLine("\t{");
		sw.WriteLine("\t\tpublic static ProblemMetadata[] Problems = new ProblemMetadata[] {");

		foreach (var problem in context.Compilation.GetSymbolsWithName("Problem", SymbolFilter.Type, context.CancellationToken)) {
			var day  = int.Parse(problem.ContainingNamespace.Name.Substring(problem.ContainingNamespace.Name.Length - 2));
			var path = Path.GetDirectoryName(problem.Locations.First().GetLineSpan().Path);

			if (problem is not INamedTypeSymbol nts) {
				continue;
			}
			
			var main = nts.GetMembers("Main").FirstOrDefault();

			if (main == null || main is not IMethodSymbol mainMethod) {
				continue;
			}

			if (!mainMethod.IsStatic) {
				continue;
			}

			var mainString = $"{nts.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}.{mainMethod.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}(fileName)";
			var mainCall   = mainMethod.ReturnsVoid ? $"fileName => {mainString}" : $"fileName => {{ Console.WriteLine({mainString}); }}";

			sw.WriteLine($"\t\t\tnew(typeof({problem.ToDisplayString()}), {day}, @\"{path}\", {mainCall}),");
		}

		sw.WriteLine("\t\t};");
		sw.WriteLine("\t}");
		sw.WriteLine("}");

		context.AddSource($"{entryPoint.ContainingType.Name}.g.cs", sw.ToString());
	}

	private class MethodVisitor : SymbolVisitor
	{
		public override void VisitMethod(IMethodSymbol symbol)
		{
			base.VisitMethod(symbol);
		}
	}
}
