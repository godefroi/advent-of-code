using System.IO;

namespace AdventOfCode;

[Generator]
public class ProblemSourceGenerator : ISourceGenerator
{
	public void Initialize(GeneratorInitializationContext context) { }

	public void Execute(GeneratorExecutionContext context)
	{
		var entryPoint = context.Compilation.GetEntryPoint(context.CancellationToken);

		if (entryPoint == null) {
			return;
		}

		var programType = entryPoint.ContainingType;

		//programType.DeclaringSyntaxReferences.Any(sr => sr.SyntaxTree.)

		var problemsMember = programType.GetMembers("Problems").SingleOrDefault();

		if (problemsMember == null) {
			return;
		}

		using var swProblems   = new StringWriter();
		using var swBenchmarks = new StringWriter();

		swProblems.WriteLine("// <auto-generated/>");
		swProblems.WriteLine("");
		swProblems.WriteLine("using System;");
		swProblems.WriteLine("");
		swProblems.WriteLine("using AdventOfCode;");
		swProblems.WriteLine("");
		swProblems.WriteLine($"namespace {entryPoint.ContainingNamespace.ToDisplayString()}");
		swProblems.WriteLine("{");
		swProblems.WriteLine($"\tpublic static partial class {entryPoint.ContainingType.Name}");
		swProblems.WriteLine("\t{");
		swProblems.WriteLine("\t\tprivate static partial ProblemMetadata[] Problems() => ProblemList.Problems;");
		swProblems.WriteLine("\t}");
		swProblems.WriteLine("");
		swProblems.WriteLine("\tfile static class ProblemList");
		swProblems.WriteLine("\t{");
		swProblems.WriteLine("\t\tpublic static ProblemMetadata[] Problems = new ProblemMetadata[] {");

		swBenchmarks.WriteLine("// <auto-generated/>");
		swBenchmarks.WriteLine("");
		swBenchmarks.WriteLine("using System;");
		swBenchmarks.WriteLine("");
		swBenchmarks.WriteLine("namespace AdventOfCode.ProblemBenchmarks");
		swBenchmarks.WriteLine("{");

		foreach (var problem in context.Compilation.GetSymbolsWithName("Problem", SymbolFilter.Type, context.CancellationToken)) {
			var day  = int.Parse(problem.ContainingNamespace.Name.Substring(problem.ContainingNamespace.Name.Length - 2));
			var path = Path.GetDirectoryName(problem.Locations.First().GetLineSpan().Path);

			if (problem is not INamedTypeSymbol nts) {
				continue;
			}

			var main = nts.GetMembers("Main").FirstOrDefault();

			if (main == null || main is not IMethodSymbol mainMethod) {
				continue;
			}

			if (!mainMethod.IsStatic) {
				continue;
			}

			var mainString = $"{nts.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}.{mainMethod.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}(fileName)";
			var mainCall   = mainMethod.ReturnsVoid ? $"fileName => {mainString}" : $"fileName => {{ Console.WriteLine({mainString}); }}";

			swProblems.WriteLine($"\t\t\tnew(typeof({problem.ToDisplayString()}), {day}, @\"{path}\", {mainCall}, typeof(AdventOfCode.ProblemBenchmarks.Day{day,00})),");

			swBenchmarks.WriteLine($"\tpublic class Day{day,00}");
			swBenchmarks.WriteLine("\t{");

			// foreach (var file in Directory.GetFiles(path, "input*.txt").Select(Path.GetFileName)) {
			// 	var benchmarkName = file switch {
			// 		"input.txt" => "MainInput",
			// 		_ => Path.GetFileNameWithoutExtension(file).Substring(5) + "Input",
			// 	};

			// 	swBenchmarks.WriteLine($"\t\t[BenchmarkDotNet.Attributes.Benchmark(Description = \"Day {day,00}, {file}\")]");
			// 	swBenchmarks.WriteLine($"\t\t[BenchmarkDotNet.Attributes.BenchmarkCategory(\"Day {day,00}\", \"{file}\")]");
			// 	swBenchmarks.WriteLine($"\t\tpublic async Task {benchmarkName}()");
			// 	swBenchmarks.WriteLine("\t\t{");
			// 	swBenchmarks.WriteLine($"\t\t\t{(mainMethod.IsAsync ? "await " : "")}{nts.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}.{mainMethod.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}(\"input.txt\");");
			// 	swBenchmarks.WriteLine("\t\t\tawait System.Threading.Tasks.Task.CompletedTask;");
			// 	swBenchmarks.WriteLine("\t\t}");
			// 	swBenchmarks.WriteLine("");
			// }

			swBenchmarks.WriteLine("\t}");
			swBenchmarks.WriteLine("");
		}

		swProblems.WriteLine("\t\t};");
		swProblems.WriteLine("\t}");
		swProblems.WriteLine("}");

		swBenchmarks.WriteLine("}");

		context.AddSource($"{entryPoint.ContainingType.Name}.g.cs", swProblems.ToString());
		context.AddSource("ProblemBenchmarks.g.cs", swBenchmarks.ToString());
	}

	private class MethodVisitor : SymbolVisitor
	{
		public override void VisitMethod(IMethodSymbol symbol)
		{
			base.VisitMethod(symbol);
		}
	}
}
